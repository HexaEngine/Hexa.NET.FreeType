// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Pixel_Mode<br/>
	/// <br/>
	/// :<br/>
	/// An enumeration type used to describe the format of pixels in a given<br/>
	/// bitmap.  Note that additional formats may be added in the future.<br/>
	/// <br/>
	/// :<br/>
	/// FT_PIXEL_MODE_NONE ::<br/>
	/// Value~0 is reserved.<br/>
	/// FT_PIXEL_MODE_MONO ::<br/>
	/// A monochrome bitmap, using 1~bit per pixel.  Note that pixels are<br/>
	/// stored in most-significant order (MSB), which means that the<br/>
	/// left-most pixel in a byte has value 128.<br/>
	/// FT_PIXEL_MODE_GRAY ::<br/>
	/// An 8-bit bitmap, generally used to represent anti-aliased glyph<br/>
	/// images.  Each pixel is stored in one byte.  Note that the number of<br/>
	/// 'gray' levels is stored in the `num_grays` field of the <br/>
	/// _Bitmap<br/>
	/// structure (it generally is 256).<br/>
	/// FT_PIXEL_MODE_GRAY2 ::<br/>
	/// A 2-bit per pixel bitmap, used to represent embedded anti-aliased<br/>
	/// bitmaps in font files according to the OpenType specification.  We<br/>
	/// haven't found a single font using this format, however.<br/>
	/// FT_PIXEL_MODE_GRAY4 ::<br/>
	/// A 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps<br/>
	/// in font files according to the OpenType specification.  We haven't<br/>
	/// found a single font using this format, however.<br/>
	/// FT_PIXEL_MODE_LCD ::<br/>
	/// An 8-bit bitmap, representing RGB or BGR decimated glyph images used<br/>
	/// for display on LCD displays; the bitmap is three times wider than<br/>
	/// the original glyph image.  See also <br/>
	/// _RENDER_MODE_LCD.<br/>
	/// FT_PIXEL_MODE_LCD_V ::<br/>
	/// An 8-bit bitmap, representing RGB or BGR decimated glyph images used<br/>
	/// for display on rotated LCD displays; the bitmap is three times<br/>
	/// taller than the original glyph image.  See also<br/>
	/// <br/>
	/// _RENDER_MODE_LCD_V.<br/>
	/// FT_PIXEL_MODE_BGRA ::<br/>
	/// [Since 2.5] An image with four 8-bit channels per pixel,<br/>
	/// representing a color image (such as emoticons) with alpha channel.<br/>
	/// For each pixel, the format is BGRA, which means, the blue channel<br/>
	/// comes first in memory.  The color channels are pre-multiplied and in<br/>
	/// the sRGB colorspace.  For example, full red at half-translucent<br/>
	/// opacity will be represented as '00,00,80,80', not '00,00,FF,80'.<br/>
	/// See also <br/>
	/// _LOAD_COLOR.<br/>
	/// </summary>
	[NativeName(NativeNameType.Enum, "FT_Pixel_Mode_")]
	[Flags]
	public enum FTPixelMode : int
	{
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_NONE")]
		[NativeName(NativeNameType.Value, "0")]
		None = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_MONO")]
		[NativeName(NativeNameType.Value, "1")]
		Mono = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_GRAY")]
		[NativeName(NativeNameType.Value, "2")]
		Gray = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_GRAY2")]
		[NativeName(NativeNameType.Value, "3")]
		Gray2 = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_GRAY4")]
		[NativeName(NativeNameType.Value, "4")]
		Gray4 = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_LCD")]
		[NativeName(NativeNameType.Value, "5")]
		Lcd = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_LCD_V")]
		[NativeName(NativeNameType.Value, "6")]
		LcdV = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_BGRA")]
		[NativeName(NativeNameType.Value, "7")]
		Bgra = unchecked(7),
		/// <summary>
		/// do not remove <br/>
		/// </summary>
		[NativeName(NativeNameType.EnumItem, "FT_PIXEL_MODE_MAX")]
		[NativeName(NativeNameType.Value, "8")]
		Max = unchecked(8),
	}
}
