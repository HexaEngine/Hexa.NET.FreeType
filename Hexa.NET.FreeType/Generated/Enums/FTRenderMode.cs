// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Render_Mode<br/>
	/// <br/>
	/// :<br/>
	/// Render modes supported by FreeType~2.  Each mode corresponds to a<br/>
	/// specific type of scanline conversion performed on the outline.<br/>
	/// For bitmap fonts and embedded bitmaps the `bitmap->pixel_mode` field<br/>
	/// in the <br/>
	/// _GlyphSlotRec structure gives the format of the returned<br/>
	/// bitmap.<br/>
	/// All modes except <br/>
	/// _RENDER_MODE_MONO use 256 levels of opacity,<br/>
	/// indicating pixel coverage.  Use linear alpha blending and gamma<br/>
	/// correction to correctly render non-monochrome glyph bitmaps onto a<br/>
	/// surface; see <br/>
	/// _Render_Glyph.<br/>
	/// The <br/>
	/// _RENDER_MODE_SDF is a special render mode that uses up to 256<br/>
	/// distance values, indicating the signed distance from the grid position<br/>
	/// to the nearest outline.<br/>
	/// <br/>
	/// :<br/>
	/// FT_RENDER_MODE_NORMAL ::<br/>
	/// Default render mode; it corresponds to 8-bit anti-aliased bitmaps.<br/>
	/// FT_RENDER_MODE_LIGHT ::<br/>
	/// This is equivalent to <br/>
	/// _RENDER_MODE_NORMAL.  It is only defined as<br/>
	/// a separate value because render modes are also used indirectly to<br/>
	/// define hinting algorithm selectors.  See <br/>
	/// _LOAD_TARGET_XXX for<br/>
	/// details.<br/>
	/// FT_RENDER_MODE_MONO ::<br/>
	/// This mode corresponds to 1-bit bitmaps (with 2~levels of opacity).<br/>
	/// FT_RENDER_MODE_LCD ::<br/>
	/// This mode corresponds to horizontal RGB and BGR subpixel displays<br/>
	/// like LCD screens.  It produces 8-bit bitmaps that are 3~times the<br/>
	/// width of the original glyph outline in pixels, and which use the<br/>
	/// <br/>
	/// _PIXEL_MODE_LCD mode.<br/>
	/// FT_RENDER_MODE_LCD_V ::<br/>
	/// This mode corresponds to vertical RGB and BGR subpixel displays<br/>
	/// (like PDA screens, rotated LCD displays, etc.).  It produces 8-bit<br/>
	/// bitmaps that are 3~times the height of the original glyph outline in<br/>
	/// pixels and use the <br/>
	/// _PIXEL_MODE_LCD_V mode.<br/>
	/// FT_RENDER_MODE_SDF ::<br/>
	/// The positive (unsigned) 8-bit bitmap values can be converted to the<br/>
	/// single-channel signed distance field (SDF) by subtracting 128, with<br/>
	/// the positive and negative results corresponding to the inside and<br/>
	/// the outside of a glyph contour, respectively.  The distance units are<br/>
	/// arbitrarily determined by an adjustable <br/>
	/// property.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Enum, "FT_Render_Mode_")]
	[Flags]
	public enum FTRenderMode : int
	{
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_NORMAL")]
		[NativeName(NativeNameType.Value, "0")]
		Normal = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_LIGHT")]
		[NativeName(NativeNameType.Value, "1")]
		Light = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_MONO")]
		[NativeName(NativeNameType.Value, "2")]
		Mono = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_LCD")]
		[NativeName(NativeNameType.Value, "3")]
		Lcd = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_LCD_V")]
		[NativeName(NativeNameType.Value, "4")]
		LcdV = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_SDF")]
		[NativeName(NativeNameType.Value, "5")]
		Sdf = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "FT_RENDER_MODE_MAX")]
		[NativeName(NativeNameType.Value, "6")]
		Max = unchecked(6),
	}
}
