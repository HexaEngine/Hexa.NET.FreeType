// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Size_Request_Type<br/>
	/// <br/>
	/// :<br/>
	/// An enumeration type that lists the supported size request types, i.e.,<br/>
	/// what input size (in font units) maps to the requested output size (in<br/>
	/// pixels, as computed from the arguments of <br/>
	/// _Size_Request).<br/>
	/// <br/>
	/// :<br/>
	/// FT_SIZE_REQUEST_TYPE_NOMINAL ::<br/>
	/// The nominal size.  The `units_per_EM` field of <br/>
	/// _FaceRec is used<br/>
	/// to determine both scaling values.<br/>
	/// This is the standard scaling found in most applications.  In<br/>
	/// particular, use this size request type for TrueType fonts if they<br/>
	/// provide optical scaling or something similar.  Note, however, that<br/>
	/// `units_per_EM` is a rather abstract value which bears no relation to<br/>
	/// the actual size of the glyphs in a font.<br/>
	/// FT_SIZE_REQUEST_TYPE_REAL_DIM ::<br/>
	/// The real dimension.  The sum of the `ascender` and (minus of) the<br/>
	/// `descender` fields of <br/>
	/// _FaceRec is used to determine both scaling<br/>
	/// values.<br/>
	/// FT_SIZE_REQUEST_TYPE_BBOX ::<br/>
	/// The font bounding box.  The width and height of the `bbox` field of<br/>
	/// <br/>
	/// _FaceRec are used to determine the horizontal and vertical<br/>
	/// scaling value, respectively.<br/>
	/// FT_SIZE_REQUEST_TYPE_CELL ::<br/>
	/// The `max_advance_width` field of <br/>
	/// _FaceRec is used to determine<br/>
	/// the horizontal scaling value; the vertical scaling value is<br/>
	/// determined the same way as <br/>
	/// _SIZE_REQUEST_TYPE_REAL_DIM does.<br/>
	/// Finally, both scaling values are set to the smaller one.  This type<br/>
	/// is useful if you want to specify the font size for, say, a window of<br/>
	/// a given dimension and 80x24 cells.<br/>
	/// FT_SIZE_REQUEST_TYPE_SCALES ::<br/>
	/// Specify the scaling values directly.<br/>
	/// <br/>
	/// See the note section of <br/>
	/// _Size_Metrics if you wonder how size<br/>
	/// requesting relates to scaling values.<br/>
	/// </summary>
	[NativeName(NativeNameType.Enum, "FT_Size_Request_Type_")]
	[Flags]
	public enum FTSizeRequestType : int
	{
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_NOMINAL")]
		[NativeName(NativeNameType.Value, "0")]
		Nominal = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_REAL_DIM")]
		[NativeName(NativeNameType.Value, "1")]
		RealDim = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_BBOX")]
		[NativeName(NativeNameType.Value, "2")]
		Bbox = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_CELL")]
		[NativeName(NativeNameType.Value, "3")]
		Cell = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_SCALES")]
		[NativeName(NativeNameType.Value, "4")]
		Scales = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "FT_SIZE_REQUEST_TYPE_MAX")]
		[NativeName(NativeNameType.Value, "5")]
		Max = unchecked(5),
	}
}
