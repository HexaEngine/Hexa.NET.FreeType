// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// :<br/>
	/// FT_Size<br/>
	/// <br/>
	/// :<br/>
	/// A handle to an object that models a face scaled to a given character<br/>
	/// size.<br/>
	/// <br/>
	/// A newly created `FT_Size` object contains only meaningless zero values.<br/>
	/// You must use <br/>
	/// _Set_Char_Size, <br/>
	/// _Set_Pixel_Sizes, <br/>
	/// _Request_Size<br/>
	/// or even <br/>
	/// _Select_Size to change the content (i.e., the scaling<br/>
	/// values) of the active `FT_Size`.  Otherwise, the scaling and hinting<br/>
	/// will not be performed.<br/>
	/// You can use <br/>
	/// _New_Size to create additional size objects for a given<br/>
	/// <br/>
	/// _Face, but they won't be used by other functions until you activate<br/>
	/// it through <br/>
	/// _Activate_Size.  Only one size can be activated at any<br/>
	/// given time per face.<br/>
	/// <br/>
	/// :<br/>
	/// See <br/>
	/// _SizeRec for the publicly accessible fields of a given size<br/>
	/// object.<br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "FT_Size")]
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public readonly partial struct FTSize : IEquatable<FTSize>
	{
		public FTSize(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static FTSize Null => new FTSize(0);
		public static implicit operator FTSize(nint handle) => new FTSize(handle);
		public static bool operator ==(FTSize left, FTSize right) => left.Handle == right.Handle;
		public static bool operator !=(FTSize left, FTSize right) => left.Handle != right.Handle;
		public static bool operator ==(FTSize left, nint right) => left.Handle == right;
		public static bool operator !=(FTSize left, nint right) => left.Handle != right;
		public bool Equals(FTSize other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is FTSize handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("FTSize [0x{0}]", Handle.ToString("X"));
		#endif
	}
}
