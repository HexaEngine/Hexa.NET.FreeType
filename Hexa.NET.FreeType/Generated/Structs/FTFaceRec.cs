// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_FaceRec<br/>
	/// <br/>
	/// :<br/>
	/// FreeType root face class structure.  A face object models a typeface<br/>
	/// in a font file.<br/>
	/// <br/>
	/// :<br/>
	/// num_faces ::<br/>
	/// The number of faces in the font file.  Some font formats can have<br/>
	/// multiple faces in a single font file.<br/>
	/// face_index ::<br/>
	/// This field holds two different values.  Bits 0-15 are the index of<br/>
	/// the face in the font file (starting with value~0).  They are set<br/>
	/// to~0 if there is only one face in the font file.<br/>
	/// [Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation<br/>
	/// fonts only, holding the named instance index for the current face<br/>
	/// index (starting with value~1; value~0 indicates font access without<br/>
	/// a named instance).  For non-variation fonts, bits 16-30 are ignored.<br/>
	/// If we have the third named instance of face~4, say, `face_index` is<br/>
	/// set to 0x00030004.<br/>
	/// Bit 31 is always zero (that is, `face_index` is always a positive<br/>
	/// value).<br/>
	/// [Since 2.9] Changing the design coordinates with<br/>
	/// <br/>
	/// _Set_Var_Design_Coordinates or <br/>
	/// _Set_Var_Blend_Coordinates does<br/>
	/// not influence the named instance index value (only<br/>
	/// <br/>
	/// _Set_Named_Instance does that).<br/>
	/// face_flags ::<br/>
	/// A set of bit flags that give important information about the face;<br/>
	/// see <br/>
	/// _FACE_FLAG_XXX for the details.<br/>
	/// style_flags ::<br/>
	/// The lower 16~bits contain a set of bit flags indicating the style of<br/>
	/// the face; see <br/>
	/// _STYLE_FLAG_XXX for the details.<br/>
	/// [Since 2.6.1] Bits 16-30 hold the number of named instances<br/>
	/// available for the current face if we have a GX or OpenType variation<br/>
	/// (sub)font.  Bit 31 is always zero (that is, `style_flags` is always<br/>
	/// a positive value).  Note that a variation font has always at least<br/>
	/// one named instance, namely the default instance.<br/>
	/// num_glyphs ::<br/>
	/// The number of glyphs in the face.  If the face is scalable and has<br/>
	/// sbits (see `num_fixed_sizes`), it is set to the number of outline<br/>
	/// glyphs.<br/>
	/// For CID-keyed fonts (not in an SFNT wrapper) this value gives the<br/>
	/// highest CID used in the font.<br/>
	/// family_name ::<br/>
	/// The face's family name.  This is an ASCII string, usually in<br/>
	/// English, that describes the typeface's family (like 'Times New<br/>
	/// Roman', 'Bodoni', 'Garamond', etc).  This is a least common<br/>
	/// denominator used to list fonts.  Some formats (TrueType <br/>
	/// &<br/>
	/// OpenType)<br/>
	/// provide localized and Unicode versions of this string.  Applications<br/>
	/// should use the format-specific interface to access them.  Can be<br/>
	/// `NULL` (e.g., in fonts embedded in a PDF file).<br/>
	/// In case the font doesn't provide a specific family name entry,<br/>
	/// FreeType tries to synthesize one, deriving it from other name<br/>
	/// entries.<br/>
	/// style_name ::<br/>
	/// The face's style name.  This is an ASCII string, usually in English,<br/>
	/// that describes the typeface's style (like 'Italic', 'Bold',<br/>
	/// 'Condensed', etc).  Not all font formats provide a style name, so<br/>
	/// this field is optional, and can be set to `NULL`.  As for<br/>
	/// `family_name`, some formats provide localized and Unicode versions<br/>
	/// of this string.  Applications should use the format-specific<br/>
	/// interface to access them.<br/>
	/// num_fixed_sizes ::<br/>
	/// The number of bitmap strikes in the face.  Even if the face is<br/>
	/// scalable, there might still be bitmap strikes, which are called<br/>
	/// 'sbits' in that case.<br/>
	/// available_sizes ::<br/>
	/// An array of <br/>
	/// _Bitmap_Size for all bitmap strikes in the face.  It<br/>
	/// is set to `NULL` if there is no bitmap strike.<br/>
	/// Note that FreeType tries to sanitize the strike data since they are<br/>
	/// sometimes sloppy or incorrect, but this can easily fail.<br/>
	/// num_charmaps ::<br/>
	/// The number of charmaps in the face.<br/>
	/// charmaps ::<br/>
	/// An array of the charmaps of the face.<br/>
	/// generic ::<br/>
	/// A field reserved for client uses.  See the <br/>
	/// _Generic type<br/>
	/// description.<br/>
	/// bbox ::<br/>
	/// The font bounding box.  Coordinates are expressed in font units (see<br/>
	/// `units_per_EM`).  The box is large enough to contain any glyph from<br/>
	/// the font.  Thus, `bbox.yMax` can be seen as the 'maximum ascender',<br/>
	/// and `bbox.yMin` as the 'minimum descender'.  Only relevant for<br/>
	/// scalable formats.<br/>
	/// Note that the bounding box might be off by (at least) one pixel for<br/>
	/// hinted fonts.  See <br/>
	/// _Size_Metrics for further discussion.<br/>
	/// Note that the bounding box does not vary in OpenType variation fonts<br/>
	/// and should only be used in relation to the default instance.<br/>
	/// units_per_EM ::<br/>
	/// The number of font units per EM square for this face.  This is<br/>
	/// typically 2048 for TrueType fonts, and 1000 for Type~1 fonts.  Only<br/>
	/// relevant for scalable formats.<br/>
	/// ascender ::<br/>
	/// The typographic ascender of the face, expressed in font units.  For<br/>
	/// font formats not having this information, it is set to `bbox.yMax`.<br/>
	/// Only relevant for scalable formats.<br/>
	/// descender ::<br/>
	/// The typographic descender of the face, expressed in font units.  For<br/>
	/// font formats not having this information, it is set to `bbox.yMin`.<br/>
	/// Note that this field is negative for values below the baseline.<br/>
	/// Only relevant for scalable formats.<br/>
	/// height ::<br/>
	/// This value is the vertical distance between two consecutive<br/>
	/// baselines, expressed in font units.  It is always positive.  Only<br/>
	/// relevant for scalable formats.<br/>
	/// If you want the global glyph height, use `ascender - descender`.<br/>
	/// max_advance_width ::<br/>
	/// The maximum advance width, in font units, for all glyphs in this<br/>
	/// face.  This can be used to make word wrapping computations faster.<br/>
	/// Only relevant for scalable formats.<br/>
	/// max_advance_height ::<br/>
	/// The maximum advance height, in font units, for all glyphs in this<br/>
	/// face.  This is only relevant for vertical layouts, and is set to<br/>
	/// `height` for fonts that do not provide vertical metrics.  Only<br/>
	/// relevant for scalable formats.<br/>
	/// underline_position ::<br/>
	/// The position, in font units, of the underline line for this face.<br/>
	/// It is the center of the underlining stem.  Only relevant for<br/>
	/// scalable formats.<br/>
	/// underline_thickness ::<br/>
	/// The thickness, in font units, of the underline for this face.  Only<br/>
	/// relevant for scalable formats.<br/>
	/// glyph ::<br/>
	/// The face's associated glyph slot(s).<br/>
	/// size ::<br/>
	/// The current active size for this face.<br/>
	/// charmap ::<br/>
	/// The current active charmap for this face.<br/>
	/// <br/>
	/// For an OpenType variation font, the values of the following fields can<br/>
	/// change after a call to <br/>
	/// _Set_Var_Design_Coordinates (and friends) if<br/>
	/// the font contains an 'MVAR' table: `ascender`, `descender`, `height`,<br/>
	/// `underline_position`, and `underline_thickness`.<br/>
	/// Especially for TrueType fonts see also the documentation for<br/>
	/// <br/>
	/// _Size_Metrics.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_FaceRec_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTFaceRec
	{
		[NativeName(NativeNameType.Field, "num_faces")]
		[NativeName(NativeNameType.Type, "FT_Long")]
		public int NumFaces;
		[NativeName(NativeNameType.Field, "face_index")]
		[NativeName(NativeNameType.Type, "FT_Long")]
		public int FaceIndex;
		[NativeName(NativeNameType.Field, "face_flags")]
		[NativeName(NativeNameType.Type, "FT_Long")]
		public int FaceFlags;
		[NativeName(NativeNameType.Field, "style_flags")]
		[NativeName(NativeNameType.Type, "FT_Long")]
		public int StyleFlags;
		[NativeName(NativeNameType.Field, "num_glyphs")]
		[NativeName(NativeNameType.Type, "FT_Long")]
		public int NumGlyphs;
		[NativeName(NativeNameType.Field, "family_name")]
		[NativeName(NativeNameType.Type, "FT_String *")]
		public unsafe byte* FamilyName;
		[NativeName(NativeNameType.Field, "style_name")]
		[NativeName(NativeNameType.Type, "FT_String *")]
		public unsafe byte* StyleName;
		[NativeName(NativeNameType.Field, "num_fixed_sizes")]
		[NativeName(NativeNameType.Type, "FT_Int")]
		public int NumFixedSizes;
		[NativeName(NativeNameType.Field, "available_sizes")]
		[NativeName(NativeNameType.Type, "FT_Bitmap_Size *")]
		public unsafe FTBitmapSize* AvailableSizes;
		[NativeName(NativeNameType.Field, "num_charmaps")]
		[NativeName(NativeNameType.Type, "FT_Int")]
		public int NumCharmaps;
		[NativeName(NativeNameType.Field, "charmaps")]
		[NativeName(NativeNameType.Type, "FT_CharMapRec_ * *")]
		public unsafe FTCharMapRec** Charmaps;
		[NativeName(NativeNameType.Field, "generic")]
		[NativeName(NativeNameType.Type, "FT_Generic")]
		public FTGeneric Generic;
		/// <summary>
		/// The following member variables (down to `underline_thickness`) <br/>
		/// are only relevant to scalable outlines; cf. <br/>
		/// _Bitmap_Size    <br/>
		/// for bitmap fonts.                                              <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bbox")]
		[NativeName(NativeNameType.Type, "FT_BBox")]
		public FTBBox Bbox;

		[NativeName(NativeNameType.Field, "units_per_EM")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort UnitsPerEM;
		[NativeName(NativeNameType.Field, "ascender")]
		[NativeName(NativeNameType.Type, "FT_Short")]
		public short Ascender;
		[NativeName(NativeNameType.Field, "descender")]
		[NativeName(NativeNameType.Type, "FT_Short")]
		public short Descender;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "FT_Short")]
		public short Height;
		[NativeName(NativeNameType.Field, "max_advance_width")]
		[NativeName(NativeNameType.Type, "FT_Short")]
		public short MaxAdvanceWidth;
		[NativeName(NativeNameType.Field, "max_advance_height")]
		[NativeName(NativeNameType.Type, "FT_Short")]
		public short MaxAdvanceHeight;
		[NativeName(NativeNameType.Field, "underline_position")]
		[NativeName(NativeNameType.Type, "FT_Short")]
		public short UnderlinePosition;
		[NativeName(NativeNameType.Field, "underline_thickness")]
		[NativeName(NativeNameType.Type, "FT_Short")]
		public short UnderlineThickness;
		[NativeName(NativeNameType.Field, "glyph")]
		[NativeName(NativeNameType.Type, "FT_GlyphSlotRec_ *")]
		public unsafe FTGlyphSlotRec* Glyph;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "FT_SizeRec_ *")]
		public unsafe FTSizeRec* Size;
		[NativeName(NativeNameType.Field, "charmap")]
		[NativeName(NativeNameType.Type, "FT_CharMapRec_ *")]
		public unsafe FTCharMapRec* Charmap;
		/// <summary>
		/// private fields, internal to FreeType <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "driver")]
		[NativeName(NativeNameType.Type, "FT_Driver")]
		public FTDriver Driver;

		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "FT_Memory")]
		public FTMemory Memory;
		[NativeName(NativeNameType.Field, "stream")]
		[NativeName(NativeNameType.Type, "FT_Stream")]
		public FTStream Stream;
		[NativeName(NativeNameType.Field, "sizes_list")]
		[NativeName(NativeNameType.Type, "FT_ListRec")]
		public FTListRec SizesList;
		/// <summary>
		/// face-specific auto-hinter data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "autohint")]
		[NativeName(NativeNameType.Type, "FT_Generic")]
		public FTGeneric Autohint;

		/// <summary>
		/// unused                         <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "extensions")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* Extensions;

		[NativeName(NativeNameType.Field, "internal")]
		[NativeName(NativeNameType.Type, "FT_Face_InternalRec_ *")]
		public unsafe FTFaceInternalRec* Internal;

		public unsafe FTFaceRec(int numFaces = default, int faceIndex = default, int faceFlags = default, int styleFlags = default, int numGlyphs = default, byte* familyName = default, byte* styleName = default, int numFixedSizes = default, FTBitmapSize* availableSizes = default, int numCharmaps = default, FTCharMapRec** charmaps = default, FTGeneric generic = default, FTBBox bbox = default, ushort unitsPerEm = default, short ascender = default, short descender = default, short height = default, short maxAdvanceWidth = default, short maxAdvanceHeight = default, short underlinePosition = default, short underlineThickness = default, FTGlyphSlotRec* glyph = default, FTSizeRec* size = default, FTCharMapRec* charmap = default, FTDriver driver = default, FTMemory memory = default, FTStream stream = default, FTListRec sizesList = default, FTGeneric autohint = default, void* extensions = default, FTFaceInternalRec* @internal = default)
		{
			NumFaces = numFaces;
			FaceIndex = faceIndex;
			FaceFlags = faceFlags;
			StyleFlags = styleFlags;
			NumGlyphs = numGlyphs;
			FamilyName = familyName;
			StyleName = styleName;
			NumFixedSizes = numFixedSizes;
			AvailableSizes = availableSizes;
			NumCharmaps = numCharmaps;
			Charmaps = charmaps;
			Generic = generic;
			Bbox = bbox;
			UnitsPerEM = unitsPerEm;
			Ascender = ascender;
			Descender = descender;
			Height = height;
			MaxAdvanceWidth = maxAdvanceWidth;
			MaxAdvanceHeight = maxAdvanceHeight;
			UnderlinePosition = underlinePosition;
			UnderlineThickness = underlineThickness;
			Glyph = glyph;
			Size = size;
			Charmap = charmap;
			Driver = driver;
			Memory = memory;
			Stream = stream;
			SizesList = sizesList;
			Autohint = autohint;
			Extensions = extensions;
			Internal = @internal;
		}


	}

}
