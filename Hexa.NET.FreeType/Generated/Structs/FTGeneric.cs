// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Generic<br/>
	/// <br/>
	/// :<br/>
	/// Client applications often need to associate their own data to a<br/>
	/// variety of FreeType core objects.  For example, a text layout API<br/>
	/// might want to associate a glyph cache to a given size object.<br/>
	/// Some FreeType object contains a `generic` field, of type `FT_Generic`,<br/>
	/// which usage is left to client applications and font servers.<br/>
	/// It can be used to store a pointer to client-specific data, as well as<br/>
	/// the address of a 'finalizer' function, which will be called by<br/>
	/// FreeType when the object is destroyed (for example, the previous<br/>
	/// client example would put the address of the glyph cache destructor in<br/>
	/// the `finalizer` field).<br/>
	/// <br/>
	/// :<br/>
	/// data ::<br/>
	/// A typeless pointer to any client-specified data. This field is<br/>
	/// completely ignored by the FreeType library.<br/>
	/// finalizer ::<br/>
	/// A pointer to a 'generic finalizer' function, which will be called<br/>
	/// when the object is destroyed.  If this field is set to `NULL`, no<br/>
	/// code will be called.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_Generic_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTGeneric
	{
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* Data;
		[NativeName(NativeNameType.Field, "finalizer")]
		[NativeName(NativeNameType.Type, "FT_Generic_Finalizer")]
		public unsafe void* Finalizer;

		public unsafe FTGeneric(void* data = default, FTGenericFinalizer finalizer = default)
		{
			Data = data;
			Finalizer = (delegate*<void*, void>)Marshal.GetFunctionPointerForDelegate(finalizer);
		}


	}

}
