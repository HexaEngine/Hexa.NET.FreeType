// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Glyph_Metrics<br/>
	/// <br/>
	/// :<br/>
	/// A structure to model the metrics of a single glyph.  The values are<br/>
	/// expressed in 26.6 fractional pixel format; if the flag<br/>
	/// <br/>
	/// _LOAD_NO_SCALE has been used while loading the glyph, values are<br/>
	/// expressed in font units instead.<br/>
	/// <br/>
	/// :<br/>
	/// width ::<br/>
	/// The glyph's width.<br/>
	/// height ::<br/>
	/// The glyph's height.<br/>
	/// horiBearingX ::<br/>
	/// Left side bearing for horizontal layout.<br/>
	/// horiBearingY ::<br/>
	/// Top side bearing for horizontal layout.<br/>
	/// horiAdvance ::<br/>
	/// Advance width for horizontal layout.<br/>
	/// vertBearingX ::<br/>
	/// Left side bearing for vertical layout.<br/>
	/// vertBearingY ::<br/>
	/// Top side bearing for vertical layout.  Larger positive values mean<br/>
	/// further below the vertical glyph origin.<br/>
	/// vertAdvance ::<br/>
	/// Advance height for vertical layout.  Positive values mean the glyph<br/>
	/// has a positive advance downward.<br/>
	/// <br/>
	/// Stroking a glyph with an outside border does not increase<br/>
	/// `horiAdvance` or `vertAdvance`; you have to manually adjust these<br/>
	/// values to account for the added width and height.<br/>
	/// FreeType doesn't use the 'VORG' table data for CFF fonts because it<br/>
	/// doesn't have an interface to quickly retrieve the glyph height.  The<br/>
	/// y~coordinate of the vertical origin can be simply computed as<br/>
	/// `vertBearingY + height` after loading a glyph.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_Glyph_Metrics_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTGlyphMetrics
	{
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int Height;
		[NativeName(NativeNameType.Field, "horiBearingX")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int HoriBearingX;
		[NativeName(NativeNameType.Field, "horiBearingY")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int HoriBearingY;
		[NativeName(NativeNameType.Field, "horiAdvance")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int HoriAdvance;
		[NativeName(NativeNameType.Field, "vertBearingX")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int VertBearingX;
		[NativeName(NativeNameType.Field, "vertBearingY")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int VertBearingY;
		[NativeName(NativeNameType.Field, "vertAdvance")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int VertAdvance;

		public unsafe FTGlyphMetrics(int width = default, int height = default, int horiBearingX = default, int horiBearingY = default, int horiAdvance = default, int vertBearingX = default, int vertBearingY = default, int vertAdvance = default)
		{
			Width = width;
			Height = height;
			HoriBearingX = horiBearingX;
			HoriBearingY = horiBearingY;
			HoriAdvance = horiAdvance;
			VertBearingX = vertBearingX;
			VertBearingY = vertBearingY;
			VertAdvance = vertAdvance;
		}


	}

}
