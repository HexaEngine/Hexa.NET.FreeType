// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_ListNodeRec<br/>
	/// <br/>
	/// :<br/>
	/// A structure used to hold a single list element.<br/>
	/// <br/>
	/// :<br/>
	/// prev ::<br/>
	/// The previous element in the list.  `NULL` if first.<br/>
	/// next ::<br/>
	/// The next element in the list.  `NULL` if last.<br/>
	/// data ::<br/>
	/// A typeless pointer to the listed object.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_ListNodeRec_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTListNodeRec
	{
		[NativeName(NativeNameType.Field, "prev")]
		[NativeName(NativeNameType.Type, "FT_ListNodeRec_ *")]
		public unsafe FTListNodeRec* Prev;
		[NativeName(NativeNameType.Field, "next")]
		[NativeName(NativeNameType.Type, "FT_ListNodeRec_ *")]
		public unsafe FTListNodeRec* Next;
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* Data;

		public unsafe FTListNodeRec(FTListNodeRec* prev = default, FTListNodeRec* next = default, void* data = default)
		{
			Prev = prev;
			Next = next;
			Data = data;
		}


	}

}
