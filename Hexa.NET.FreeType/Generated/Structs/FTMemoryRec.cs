// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_MemoryRec<br/>
	/// <br/>
	/// :<br/>
	/// A structure used to describe a given memory manager to FreeType~2.<br/>
	/// <br/>
	/// :<br/>
	/// user ::<br/>
	/// A generic typeless pointer for user data.<br/>
	/// alloc ::<br/>
	/// A pointer type to an allocation function.<br/>
	/// free ::<br/>
	/// A pointer type to an memory freeing function.<br/>
	/// realloc ::<br/>
	/// A pointer type to a reallocation function.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_MemoryRec_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTMemoryRec
	{
		[NativeName(NativeNameType.Field, "user")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* User;
		[NativeName(NativeNameType.Field, "alloc")]
		[NativeName(NativeNameType.Type, "void * (*)() *")]
		public unsafe void* Alloc;
		[NativeName(NativeNameType.Field, "free")]
		[NativeName(NativeNameType.Type, "void (*)() *")]
		public unsafe void* Free;
		[NativeName(NativeNameType.Field, "realloc")]
		[NativeName(NativeNameType.Type, "void * (*)() *")]
		public unsafe void* Realloc;

		public unsafe FTMemoryRec(void* user = default, delegate*<void*> alloc = default, delegate*<void> free = default, delegate*<void*> realloc = default)
		{
			User = user;
			Alloc = (delegate*<void*>*)alloc;
			Free = (delegate*<void>*)free;
			Realloc = (delegate*<void*>*)realloc;
		}


	}

}
