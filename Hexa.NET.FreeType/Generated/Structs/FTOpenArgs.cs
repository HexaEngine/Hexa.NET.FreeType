// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Open_Args<br/>
	/// <br/>
	/// :<br/>
	/// A structure to indicate how to open a new font file or stream.  A<br/>
	/// pointer to such a structure can be used as a parameter for the<br/>
	/// functions <br/>
	/// _Open_Face and <br/>
	/// _Attach_Stream.<br/>
	/// <br/>
	/// :<br/>
	/// flags ::<br/>
	/// A set of bit flags indicating how to use the structure.<br/>
	/// memory_base ::<br/>
	/// The first byte of the file in memory.<br/>
	/// memory_size ::<br/>
	/// The size in bytes of the file in memory.<br/>
	/// pathname ::<br/>
	/// A pointer to an 8-bit file pathname, which must be a C~string (i.e.,<br/>
	/// no null bytes except at the very end).  The pointer is not owned by<br/>
	/// FreeType.<br/>
	/// stream ::<br/>
	/// A handle to a source stream object.<br/>
	/// driver ::<br/>
	/// This field is exclusively used by <br/>
	/// _Open_Face; it simply specifies<br/>
	/// the font driver to use for opening the face.  If set to `NULL`,<br/>
	/// FreeType tries to load the face with each one of the drivers in its<br/>
	/// list.<br/>
	/// num_params ::<br/>
	/// The number of extra parameters.<br/>
	/// params ::<br/>
	/// Extra parameters passed to the font driver when opening a new face.<br/>
	/// <br/>
	/// If the <br/>
	/// _OPEN_MEMORY bit is set, assume that this is a memory file<br/>
	/// of `memory_size` bytes, located at `memory_address`.  The data are not<br/>
	/// copied, and the client is responsible for releasing and destroying<br/>
	/// them _after_ the corresponding call to <br/>
	/// _Done_Face.<br/>
	/// Otherwise, if the <br/>
	/// _OPEN_STREAM bit is set, assume that a custom<br/>
	/// input stream `stream` is used.<br/>
	/// Otherwise, if the <br/>
	/// _OPEN_PATHNAME bit is set, assume that this is a<br/>
	/// normal file and use `pathname` to open it.<br/>
	/// If none of the above bits are set or if multiple are set at the same<br/>
	/// time, the flags are invalid and <br/>
	/// _Open_Face fails.<br/>
	/// If the <br/>
	/// _OPEN_DRIVER bit is set, <br/>
	/// _Open_Face only tries to open<br/>
	/// the file with the driver whose handler is in `driver`.<br/>
	/// If the <br/>
	/// _OPEN_PARAMS bit is set, the parameters given by<br/>
	/// `num_params` and `params` is used.  They are ignored otherwise.<br/>
	/// Ideally, both the `pathname` and `params` fields should be tagged as<br/>
	/// 'const'; this is missing for API backward compatibility.  In other<br/>
	/// words, applications should treat them as read-only.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_Open_Args_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTOpenArgs
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "FT_UInt")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "memory_base")]
		[NativeName(NativeNameType.Type, "FT_Byte const *")]
		public unsafe byte* MemoryBase;
		[NativeName(NativeNameType.Field, "memory_size")]
		[NativeName(NativeNameType.Type, "FT_Long")]
		public int MemorySize;
		[NativeName(NativeNameType.Field, "pathname")]
		[NativeName(NativeNameType.Type, "FT_String *")]
		public unsafe byte* Pathname;
		[NativeName(NativeNameType.Field, "stream")]
		[NativeName(NativeNameType.Type, "FT_Stream")]
		public FTStream Stream;
		[NativeName(NativeNameType.Field, "driver")]
		[NativeName(NativeNameType.Type, "FT_Module")]
		public FTModule Driver;
		[NativeName(NativeNameType.Field, "num_params")]
		[NativeName(NativeNameType.Type, "FT_Int")]
		public int NumParams;
		[NativeName(NativeNameType.Field, "params")]
		[NativeName(NativeNameType.Type, "FT_Parameter *")]
		public unsafe FTParameter* Params;

		public unsafe FTOpenArgs(uint flags = default, byte* memoryBase = default, int memorySize = default, byte* pathname = default, FTStream stream = default, FTModule driver = default, int numParams = default, FTParameter* @params = default)
		{
			Flags = flags;
			MemoryBase = memoryBase;
			MemorySize = memorySize;
			Pathname = pathname;
			Stream = stream;
			Driver = driver;
			NumParams = numParams;
			Params = @params;
		}


	}

}
