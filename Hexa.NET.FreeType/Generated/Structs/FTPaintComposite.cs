// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_PaintComposite<br/>
	/// <br/>
	/// :<br/>
	/// A structure representing a 'COLR' v1 `PaintComposite` paint table.<br/>
	/// Used for compositing two paints in a 'COLR' v1 directed acyclic graph.<br/>
	/// <br/>
	/// :<br/>
	/// source_paint ::<br/>
	/// An <br/>
	/// _OpaquePaint object referencing the source that is to be<br/>
	/// composited.<br/>
	/// composite_mode ::<br/>
	/// An <br/>
	/// _Composite_Mode enum value determining the composition<br/>
	/// operation.<br/>
	/// backdrop_paint ::<br/>
	/// An <br/>
	/// _OpaquePaint object referencing the backdrop paint that<br/>
	/// `source_paint` is composited onto.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_PaintComposite_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTPaintComposite
	{
		[NativeName(NativeNameType.Field, "source_paint")]
		[NativeName(NativeNameType.Type, "FT_OpaquePaint")]
		public FTOpaquePaint SourcePaint;
		[NativeName(NativeNameType.Field, "composite_mode")]
		[NativeName(NativeNameType.Type, "FT_Composite_Mode")]
		public FTCompositeMode CompositeMode;
		[NativeName(NativeNameType.Field, "backdrop_paint")]
		[NativeName(NativeNameType.Type, "FT_OpaquePaint")]
		public FTOpaquePaint BackdropPaint;

		public unsafe FTPaintComposite(FTOpaquePaint sourcePaint = default, FTCompositeMode compositeMode = default, FTOpaquePaint backdropPaint = default)
		{
			SourcePaint = sourcePaint;
			CompositeMode = compositeMode;
			BackdropPaint = backdropPaint;
		}


	}

}
