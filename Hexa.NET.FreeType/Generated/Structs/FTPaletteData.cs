// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Palette_Data<br/>
	/// <br/>
	/// :<br/>
	/// This structure holds the data of the 'CPAL' table.<br/>
	/// <br/>
	/// :<br/>
	/// num_palettes ::<br/>
	/// The number of palettes.<br/>
	/// palette_name_ids ::<br/>
	/// An optional read-only array of palette name IDs with `num_palettes`<br/>
	/// elements, corresponding to entries like 'dark' or 'light' in the<br/>
	/// font's 'name' table.<br/>
	/// An empty name ID in the 'CPAL' table gets represented as value<br/>
	/// 0xFFFF.<br/>
	/// `NULL` if the font's 'CPAL' table doesn't contain appropriate data.<br/>
	/// palette_flags ::<br/>
	/// An optional read-only array of palette flags with `num_palettes`<br/>
	/// elements.  Possible values are an ORed combination of<br/>
	/// <br/>
	/// _PALETTE_FOR_LIGHT_BACKGROUND and<br/>
	/// <br/>
	/// _PALETTE_FOR_DARK_BACKGROUND.<br/>
	/// `NULL` if the font's 'CPAL' table doesn't contain appropriate data.<br/>
	/// num_palette_entries ::<br/>
	/// The number of entries in a single palette.  All palettes have the<br/>
	/// same size.<br/>
	/// palette_entry_name_ids ::<br/>
	/// An optional read-only array of palette entry name IDs with<br/>
	/// `num_palette_entries`.  In each palette, entries with the same index<br/>
	/// have the same function.  For example, index~0 might correspond to<br/>
	/// string 'outline' in the font's 'name' table to indicate that this<br/>
	/// palette entry is used for outlines, index~1 might correspond to<br/>
	/// 'fill' to indicate the filling color palette entry, etc.<br/>
	/// An empty entry name ID in the 'CPAL' table gets represented as value<br/>
	/// 0xFFFF.<br/>
	/// `NULL` if the font's 'CPAL' table doesn't contain appropriate data.<br/>
	/// <br/>
	/// Use function <br/>
	/// _Palette_Select to get the colors associated with a<br/>
	/// palette entry.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_Palette_Data_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTPaletteData
	{
		[NativeName(NativeNameType.Field, "num_palettes")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort NumPalettes;
		[NativeName(NativeNameType.Field, "palette_name_ids")]
		[NativeName(NativeNameType.Type, "FT_UShort const *")]
		public unsafe ushort* PaletteNameIds;
		[NativeName(NativeNameType.Field, "palette_flags")]
		[NativeName(NativeNameType.Type, "FT_UShort const *")]
		public unsafe ushort* PaletteFlags;
		[NativeName(NativeNameType.Field, "num_palette_entries")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort NumPaletteEntries;
		[NativeName(NativeNameType.Field, "palette_entry_name_ids")]
		[NativeName(NativeNameType.Type, "FT_UShort const *")]
		public unsafe ushort* PaletteEntryNameIds;

		public unsafe FTPaletteData(ushort numPalettes = default, ushort* paletteNameIds = default, ushort* paletteFlags = default, ushort numPaletteEntries = default, ushort* paletteEntryNameIds = default)
		{
			NumPalettes = numPalettes;
			PaletteNameIds = paletteNameIds;
			PaletteFlags = paletteFlags;
			NumPaletteEntries = numPaletteEntries;
			PaletteEntryNameIds = paletteEntryNameIds;
		}


	}

}
