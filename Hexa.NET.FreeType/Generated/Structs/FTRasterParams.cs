// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Raster_Params<br/>
	/// <br/>
	/// :<br/>
	/// A structure to hold the parameters used by a raster's render function,<br/>
	/// passed as an argument to <br/>
	/// _Outline_Render.<br/>
	/// <br/>
	/// :<br/>
	/// target ::<br/>
	/// The target bitmap.<br/>
	/// source ::<br/>
	/// A pointer to the source glyph image (e.g., an <br/>
	/// _Outline).<br/>
	/// flags ::<br/>
	/// The rendering flags.<br/>
	/// gray_spans ::<br/>
	/// The gray span drawing callback.<br/>
	/// black_spans ::<br/>
	/// Unused.<br/>
	/// bit_test ::<br/>
	/// Unused.<br/>
	/// bit_set ::<br/>
	/// Unused.<br/>
	/// user ::<br/>
	/// User-supplied data that is passed to each drawing callback.<br/>
	/// clip_box ::<br/>
	/// An optional span clipping box expressed in _integer_ pixels<br/>
	/// (not in 26.6 fixed-point units).<br/>
	/// <br/>
	/// If both <br/>
	/// _RASTER_FLAG_AA and <br/>
	/// _RASTER_FLAG_DIRECT bit flags<br/>
	/// are set in `flags`, the raster calls an <br/>
	/// _SpanFunc callback<br/>
	/// `gray_spans` with `user` data as an argument ignoring `target`.  This<br/>
	/// allows direct composition over a pre-existing user surface to perform<br/>
	/// the span drawing and composition.  To optionally clip the spans, set<br/>
	/// the <br/>
	/// _RASTER_FLAG_CLIP flag and `clip_box`.  The monochrome raster<br/>
	/// does not support the direct mode.<br/>
	/// The gray-level rasterizer always uses 256 gray levels.  If you want<br/>
	/// fewer gray levels, you have to use <br/>
	/// _RASTER_FLAG_DIRECT and reduce<br/>
	/// the levels in the callback function.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_Raster_Params_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTRasterParams
	{
		[NativeName(NativeNameType.Field, "target")]
		[NativeName(NativeNameType.Type, "FT_Bitmap const *")]
		public unsafe FTBitmap* Target;
		[NativeName(NativeNameType.Field, "source")]
		[NativeName(NativeNameType.Type, "void const *")]
		public unsafe void* Source;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "int")]
		public int Flags;
		[NativeName(NativeNameType.Field, "gray_spans")]
		[NativeName(NativeNameType.Type, "FT_SpanFunc")]
		public unsafe void* GraySpans;
		/// <summary>
		/// unused <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "black_spans")]
		[NativeName(NativeNameType.Type, "FT_SpanFunc")]
		public unsafe void* BlackSpans;
		/// <summary>
		/// unused <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bit_test")]
		[NativeName(NativeNameType.Type, "FT_Raster_BitTest_Func")]
		public unsafe void* BitTest;
		/// <summary>
		/// unused <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bit_set")]
		[NativeName(NativeNameType.Type, "FT_Raster_BitSet_Func")]
		public unsafe void* BitSet;
		[NativeName(NativeNameType.Field, "user")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* User;
		[NativeName(NativeNameType.Field, "clip_box")]
		[NativeName(NativeNameType.Type, "FT_BBox")]
		public FTBBox ClipBox;

		public unsafe FTRasterParams(FTBitmap* target = default, void* source = default, int flags = default, FTSpanFunc graySpans = default, FTSpanFunc blackSpans = default, FTRasterBitTestFunc bitTest = default, FTRasterBitSetFunc bitSet = default, void* user = default, FTBBox clipBox = default)
		{
			Target = target;
			Source = source;
			Flags = flags;
			GraySpans = (delegate*<int, int, FTSpan*, void*, void>)Marshal.GetFunctionPointerForDelegate(graySpans);
			BlackSpans = (delegate*<int, int, FTSpan*, void*, void>)Marshal.GetFunctionPointerForDelegate(blackSpans);
			BitTest = (delegate*<int, int, void*, int>)Marshal.GetFunctionPointerForDelegate(bitTest);
			BitSet = (delegate*<int, int, void*, void>)Marshal.GetFunctionPointerForDelegate(bitSet);
			User = user;
			ClipBox = clipBox;
		}


	}

}
