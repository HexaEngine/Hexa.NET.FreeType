// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_Size_Metrics<br/>
	/// <br/>
	/// :<br/>
	/// The size metrics structure gives the metrics of a size object.<br/>
	/// <br/>
	/// :<br/>
	/// x_ppem ::<br/>
	/// The width of the scaled EM square in pixels, hence the term 'ppem'<br/>
	/// (pixels per EM).  It is also referred to as 'nominal width'.<br/>
	/// y_ppem ::<br/>
	/// The height of the scaled EM square in pixels, hence the term 'ppem'<br/>
	/// (pixels per EM).  It is also referred to as 'nominal height'.<br/>
	/// x_scale ::<br/>
	/// A 16.16 fractional scaling value to convert horizontal metrics from<br/>
	/// font units to 26.6 fractional pixels.  Only relevant for scalable<br/>
	/// font formats.<br/>
	/// y_scale ::<br/>
	/// A 16.16 fractional scaling value to convert vertical metrics from<br/>
	/// font units to 26.6 fractional pixels.  Only relevant for scalable<br/>
	/// font formats.<br/>
	/// ascender ::<br/>
	/// The ascender in 26.6 fractional pixels, rounded up to an integer<br/>
	/// value.  See <br/>
	/// _FaceRec for the details.<br/>
	/// descender ::<br/>
	/// The descender in 26.6 fractional pixels, rounded down to an integer<br/>
	/// value.  See <br/>
	/// _FaceRec for the details.<br/>
	/// height ::<br/>
	/// The height in 26.6 fractional pixels, rounded to an integer value.<br/>
	/// See <br/>
	/// _FaceRec for the details.<br/>
	/// max_advance ::<br/>
	/// The maximum advance width in 26.6 fractional pixels, rounded to an<br/>
	/// integer value.  See <br/>
	/// _FaceRec for the details.<br/>
	/// <br/>
	/// ```<br/>
	/// scaled_ascender = FT_MulFix( face->ascender,<br/>
	/// size_metrics->y_scale );<br/>
	/// ```<br/>
	/// Note that due to glyph hinting and the selected rendering mode these<br/>
	/// values are usually not exact; consequently, they must be treated as<br/>
	/// unreliable with an error margin of at least one pixel!<br/>
	/// Indeed, the only way to get the exact metrics is to render _all_<br/>
	/// glyphs.  As this would be a definite performance hit, it is up to<br/>
	/// client applications to perform such computations.<br/>
	/// The `FT_Size_Metrics` structure is valid for bitmap fonts also.<br/>
	/// **TrueType fonts with native bytecode hinting**<br/>
	/// All applications that handle TrueType fonts with native hinting must<br/>
	/// be aware that TTFs expect different rounding of vertical font<br/>
	/// dimensions.  The application has to cater for this, especially if it<br/>
	/// wants to rely on a TTF's vertical data (for example, to properly align<br/>
	/// box characters vertically).<br/>
	/// Only the application knows _in advance_ that it is going to use native<br/>
	/// hinting for TTFs!  FreeType, on the other hand, selects the hinting<br/>
	/// mode not at the time of creating an <br/>
	/// _Size object but much later,<br/>
	/// namely while calling <br/>
	/// _Load_Glyph.<br/>
	/// Here is some pseudo code that illustrates a possible solution.<br/>
	/// ```<br/>
	/// font_format = FT_Get_Font_Format( face );<br/>
	/// if ( !strcmp( font_format, "TrueType" ) <br/>
	/// &<br/>
	/// &<br/>
	/// do_native_bytecode_hinting         )<br/>
	/// {<br/>
	/// ascender  = ROUND( FT_MulFix( face->ascender,<br/>
	/// size_metrics->y_scale ) );<br/>
	/// descender = ROUND( FT_MulFix( face->descender,<br/>
	/// size_metrics->y_scale ) );<br/>
	/// }<br/>
	/// else<br/>
	/// {<br/>
	/// ascender  = size_metrics->ascender;<br/>
	/// descender = size_metrics->descender;<br/>
	/// }<br/>
	/// height      = size_metrics->height;<br/>
	/// max_advance = size_metrics->max_advance;<br/>
	/// ```<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_Size_Metrics_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTSizeMetrics
	{
		/// <summary>
		/// horizontal pixels per EM               <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x_ppem")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort XPpem;

		/// <summary>
		/// vertical pixels per EM                 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y_ppem")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort YPpem;

		/// <summary>
		/// scaling values used to convert font    <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x_scale")]
		[NativeName(NativeNameType.Type, "FT_Fixed")]
		public int XScale;

		/// <summary>
		/// units to 26.6 fractional pixels        <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y_scale")]
		[NativeName(NativeNameType.Type, "FT_Fixed")]
		public int YScale;

		/// <summary>
		/// ascender in 26.6 frac. pixels          <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ascender")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int Ascender;

		/// <summary>
		/// descender in 26.6 frac. pixels         <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descender")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int Descender;

		/// <summary>
		/// text height in 26.6 frac. pixels       <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int Height;

		/// <summary>
		/// max horizontal advance, in 26.6 pixels <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "max_advance")]
		[NativeName(NativeNameType.Type, "FT_Pos")]
		public int MaxAdvance;


		public unsafe FTSizeMetrics(ushort xPpem = default, ushort yPpem = default, int xScale = default, int yScale = default, int ascender = default, int descender = default, int height = default, int maxAdvance = default)
		{
			XPpem = xPpem;
			YPpem = yPpem;
			XScale = xScale;
			YScale = yScale;
			Ascender = ascender;
			Descender = descender;
			Height = height;
			MaxAdvance = maxAdvance;
		}


	}

}
