// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// FT_StreamRec<br/>
	/// <br/>
	/// :<br/>
	/// A structure used to describe an input stream.<br/>
	/// <br/>
	/// :<br/>
	/// base ::<br/>
	/// For memory-based streams, this is the address of the first stream<br/>
	/// byte in memory.  This field should always be set to `NULL` for<br/>
	/// disk-based streams.<br/>
	/// size ::<br/>
	/// The stream size in bytes.<br/>
	/// In case of compressed streams where the size is unknown before<br/>
	/// actually doing the decompression, the value is set to 0x7FFFFFFF.<br/>
	/// (Note that this size value can occur for normal streams also; it is<br/>
	/// thus just a hint.)<br/>
	/// pos ::<br/>
	/// The current position within the stream.<br/>
	/// descriptor ::<br/>
	/// This field is a union that can hold an integer or a pointer.  It is<br/>
	/// used by stream implementations to store file descriptors or `FILE*`<br/>
	/// pointers.<br/>
	/// pathname ::<br/>
	/// This field is completely ignored by FreeType.  However, it is often<br/>
	/// useful during debugging to use it to store the stream's filename<br/>
	/// (where available).<br/>
	/// read ::<br/>
	/// The stream's input function.<br/>
	/// close ::<br/>
	/// The stream's close function.<br/>
	/// memory ::<br/>
	/// The memory manager to use to preload frames.  This is set internally<br/>
	/// by FreeType and shouldn't be touched by stream implementations.<br/>
	/// cursor ::<br/>
	/// This field is set and used internally by FreeType when parsing<br/>
	/// frames.  In particular, the `FT_GET_XXX` macros use this instead of<br/>
	/// the `pos` field.<br/>
	/// limit ::<br/>
	/// This field is set and used internally by FreeType when parsing<br/>
	/// frames.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "FT_StreamRec_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FTStreamRec
	{
		[NativeName(NativeNameType.Field, "base")]
		[NativeName(NativeNameType.Type, "unsigned char *")]
		public unsafe byte* Base;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "unsigned long")]
		public uint Size;
		[NativeName(NativeNameType.Field, "pos")]
		[NativeName(NativeNameType.Type, "unsigned long")]
		public uint Pos;
		[NativeName(NativeNameType.Field, "descriptor")]
		[NativeName(NativeNameType.Type, "FT_StreamDesc_")]
		public FTStreamDesc Descriptor;
		[NativeName(NativeNameType.Field, "pathname")]
		[NativeName(NativeNameType.Type, "FT_StreamDesc_")]
		public FTStreamDesc Pathname;
		[NativeName(NativeNameType.Field, "read")]
		[NativeName(NativeNameType.Type, "unsigned long (*)() *")]
		public unsafe void* Read;
		[NativeName(NativeNameType.Field, "close")]
		[NativeName(NativeNameType.Type, "void (*)() *")]
		public unsafe void* Close;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "FT_Memory")]
		public FTMemory Memory;
		[NativeName(NativeNameType.Field, "cursor")]
		[NativeName(NativeNameType.Type, "unsigned char *")]
		public unsafe byte* Cursor;
		[NativeName(NativeNameType.Field, "limit")]
		[NativeName(NativeNameType.Type, "unsigned char *")]
		public unsafe byte* Limit;

		public unsafe FTStreamRec(byte* baseValue = default, uint size = default, uint pos = default, FTStreamDesc descriptor = default, FTStreamDesc pathname = default, delegate*<uint> read = default, delegate*<void> close = default, FTMemory memory = default, byte* cursor = default, byte* limit = default)
		{
			Base = baseValue;
			Size = size;
			Pos = pos;
			Descriptor = descriptor;
			Pathname = pathname;
			Read = (delegate*<uint>*)read;
			Close = (delegate*<void>*)close;
			Memory = memory;
			Cursor = cursor;
			Limit = limit;
		}


	}

}
