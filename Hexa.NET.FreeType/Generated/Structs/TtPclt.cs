// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.FreeType
{
	/// <summary>
	/// ************************************************************************<br/>
	/// <br/>
	/// TT_PCLT<br/>
	/// <br/>
	/// :<br/>
	/// A structure to model a TrueType 'PCLT' table.  All fields comply to<br/>
	/// the OpenType specification.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "TT_PCLT_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TtPclt
	{
		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "FT_Fixed")]
		public int Version;
		[NativeName(NativeNameType.Field, "FontNumber")]
		[NativeName(NativeNameType.Type, "FT_ULong")]
		public uint FontNumber;
		[NativeName(NativeNameType.Field, "Pitch")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort Pitch;
		[NativeName(NativeNameType.Field, "xHeight")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort XHeight;
		[NativeName(NativeNameType.Field, "Style")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort Style;
		[NativeName(NativeNameType.Field, "TypeFamily")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort TypeFamily;
		[NativeName(NativeNameType.Field, "CapHeight")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort CapHeight;
		[NativeName(NativeNameType.Field, "SymbolSet")]
		[NativeName(NativeNameType.Type, "FT_UShort")]
		public ushort SymbolSet;
		[NativeName(NativeNameType.Field, "TypeFace")]
		[NativeName(NativeNameType.Type, "FT_Char[16]")]
		public byte TypeFace_0;
		public byte TypeFace_1;
		public byte TypeFace_2;
		public byte TypeFace_3;
		public byte TypeFace_4;
		public byte TypeFace_5;
		public byte TypeFace_6;
		public byte TypeFace_7;
		public byte TypeFace_8;
		public byte TypeFace_9;
		public byte TypeFace_10;
		public byte TypeFace_11;
		public byte TypeFace_12;
		public byte TypeFace_13;
		public byte TypeFace_14;
		public byte TypeFace_15;
		[NativeName(NativeNameType.Field, "CharacterComplement")]
		[NativeName(NativeNameType.Type, "FT_Char[8]")]
		public byte CharacterComplement_0;
		public byte CharacterComplement_1;
		public byte CharacterComplement_2;
		public byte CharacterComplement_3;
		public byte CharacterComplement_4;
		public byte CharacterComplement_5;
		public byte CharacterComplement_6;
		public byte CharacterComplement_7;
		[NativeName(NativeNameType.Field, "FileName")]
		[NativeName(NativeNameType.Type, "FT_Char[6]")]
		public byte FileName_0;
		public byte FileName_1;
		public byte FileName_2;
		public byte FileName_3;
		public byte FileName_4;
		public byte FileName_5;
		[NativeName(NativeNameType.Field, "StrokeWeight")]
		[NativeName(NativeNameType.Type, "FT_Char")]
		public byte StrokeWeight;
		[NativeName(NativeNameType.Field, "WidthType")]
		[NativeName(NativeNameType.Type, "FT_Char")]
		public byte WidthType;
		[NativeName(NativeNameType.Field, "SerifStyle")]
		[NativeName(NativeNameType.Type, "FT_Byte")]
		public byte SerifStyle;
		[NativeName(NativeNameType.Field, "Reserved")]
		[NativeName(NativeNameType.Type, "FT_Byte")]
		public byte Reserved;

		public unsafe TtPclt(int version = default, uint fontNumber = default, ushort pitch = default, ushort xHeight = default, ushort style = default, ushort typeFamily = default, ushort capHeight = default, ushort symbolSet = default, byte* typeFace = default, byte* characterComplement = default, byte* fileName = default, byte strokeWeight = default, byte widthType = default, byte serifStyle = default, byte reserved = default)
		{
			Version = version;
			FontNumber = fontNumber;
			Pitch = pitch;
			XHeight = xHeight;
			Style = style;
			TypeFamily = typeFamily;
			CapHeight = capHeight;
			SymbolSet = symbolSet;
			if (typeFace != default(byte*))
			{
				TypeFace_0 = typeFace[0];
				TypeFace_1 = typeFace[1];
				TypeFace_2 = typeFace[2];
				TypeFace_3 = typeFace[3];
				TypeFace_4 = typeFace[4];
				TypeFace_5 = typeFace[5];
				TypeFace_6 = typeFace[6];
				TypeFace_7 = typeFace[7];
				TypeFace_8 = typeFace[8];
				TypeFace_9 = typeFace[9];
				TypeFace_10 = typeFace[10];
				TypeFace_11 = typeFace[11];
				TypeFace_12 = typeFace[12];
				TypeFace_13 = typeFace[13];
				TypeFace_14 = typeFace[14];
				TypeFace_15 = typeFace[15];
			}
			if (characterComplement != default(byte*))
			{
				CharacterComplement_0 = characterComplement[0];
				CharacterComplement_1 = characterComplement[1];
				CharacterComplement_2 = characterComplement[2];
				CharacterComplement_3 = characterComplement[3];
				CharacterComplement_4 = characterComplement[4];
				CharacterComplement_5 = characterComplement[5];
				CharacterComplement_6 = characterComplement[6];
				CharacterComplement_7 = characterComplement[7];
			}
			if (fileName != default(byte*))
			{
				FileName_0 = fileName[0];
				FileName_1 = fileName[1];
				FileName_2 = fileName[2];
				FileName_3 = fileName[3];
				FileName_4 = fileName[4];
				FileName_5 = fileName[5];
			}
			StrokeWeight = strokeWeight;
			WidthType = widthType;
			SerifStyle = serifStyle;
			Reserved = reserved;
		}

		public unsafe TtPclt(int version = default, uint fontNumber = default, ushort pitch = default, ushort xHeight = default, ushort style = default, ushort typeFamily = default, ushort capHeight = default, ushort symbolSet = default, Span<byte> typeFace = default, Span<byte> characterComplement = default, Span<byte> fileName = default, byte strokeWeight = default, byte widthType = default, byte serifStyle = default, byte reserved = default)
		{
			Version = version;
			FontNumber = fontNumber;
			Pitch = pitch;
			XHeight = xHeight;
			Style = style;
			TypeFamily = typeFamily;
			CapHeight = capHeight;
			SymbolSet = symbolSet;
			if (typeFace != default(Span<byte>))
			{
				TypeFace_0 = typeFace[0];
				TypeFace_1 = typeFace[1];
				TypeFace_2 = typeFace[2];
				TypeFace_3 = typeFace[3];
				TypeFace_4 = typeFace[4];
				TypeFace_5 = typeFace[5];
				TypeFace_6 = typeFace[6];
				TypeFace_7 = typeFace[7];
				TypeFace_8 = typeFace[8];
				TypeFace_9 = typeFace[9];
				TypeFace_10 = typeFace[10];
				TypeFace_11 = typeFace[11];
				TypeFace_12 = typeFace[12];
				TypeFace_13 = typeFace[13];
				TypeFace_14 = typeFace[14];
				TypeFace_15 = typeFace[15];
			}
			if (characterComplement != default(Span<byte>))
			{
				CharacterComplement_0 = characterComplement[0];
				CharacterComplement_1 = characterComplement[1];
				CharacterComplement_2 = characterComplement[2];
				CharacterComplement_3 = characterComplement[3];
				CharacterComplement_4 = characterComplement[4];
				CharacterComplement_5 = characterComplement[5];
				CharacterComplement_6 = characterComplement[6];
				CharacterComplement_7 = characterComplement[7];
			}
			if (fileName != default(Span<byte>))
			{
				FileName_0 = fileName[0];
				FileName_1 = fileName[1];
				FileName_2 = fileName[2];
				FileName_3 = fileName[3];
				FileName_4 = fileName[4];
				FileName_5 = fileName[5];
			}
			StrokeWeight = strokeWeight;
			WidthType = widthType;
			SerifStyle = serifStyle;
			Reserved = reserved;
		}


	}

}
